/* Generated by cfgopt, DO NOT EDIT.
 * 
 * This is both header and source file. Define CFGOPT_IMPL before include
 * this header file makes this a source file.
 */

#ifndef CFGOPT_{{name}}_H_
#define CFGOPT_{{name}}_H_

#include <stdbool.h>
#include <stdint.h>

#include "cfgopt.h"

/* Command line arguments defined in a cfgopt.toml file. */
struct cfgopt_args {
	{%- for flag in flags %}
	{{ flag.c_type() }} cfg_{{flag.name}};
	{%- endfor %}
};

/* Initilize cfgopt_args. */
void cfgopt_args_init(struct cfgopt_args *cfg);

/* Drop "cfg", make "cfg" is initialized. */
void cfgopt_args_drop(struct cfgopt_args *cfg);

/* Parse command line arguments, set result to "cfg". "argc" and "argv"
 * usually comes from arguments of the main function.
 */
struct cfgopt_result cfgopt_args_parse(
	struct cfgopt_args *cfg,
	int argc,
	char const **argv);

#endif // CFGOPT_{{name}}_H_

/* End of header part and starts of implementions, define CFGOPT_IMPL to open
 * it.
 */

#ifdef CFGOPT_IMPL

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void cfgopt_args_init(struct cfgopt_args *cfg)
{
	{%- for flag in flags %}
	cfg->cfg_{{flag.name}} = {{flag.c_default()}};
	{%- endfor %}
}

void cfgopt_args_drop(struct cfgopt_args *cfg)
{
	{%- for flag in flags %}
		{%- if flag.multiple %}
	cfgopt_array_drop(&cfg->cfg_{{flag.name}});
		{%- else %}
	cfg->cfg_{{flag.name}} = {{flag.c_default()}};
		{%- endif %}
	{%- endfor %}
}

struct cfgopt_result cfgopt_args_parse(
	struct cfgopt_args * cfg,
	int argc,
	char const **argv)
{
	struct flag_info flag_infos[] = {
		{%- for flag in flags %}
		{
			.name = "{{flag.name}}",
			.type = FLAG_{{flag.type_name().to_ascii_uppercase()}},
			.value = &cfg->cfg_{{flag.name}}
		},
		{%- endfor %}
	};

	struct parser p = new_parser(argv, argc);
	return parse(&p, flag_infos, {{flags.len()}});
}

#endif // CFGOPT_IMPL
