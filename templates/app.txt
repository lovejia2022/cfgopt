#ifndef CFGOPT_{{name}}_H_
#define CFGOPT_{{name}}_H_

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

struct cfgopt_{{name}} {
	{%- for flag in flags %}
	{{flag.type.c_type()}} cfg_{{flag.name}};
	{%- endfor %}
};

#ifndef CFGOPT_FATAL_EXIT
#define CFGOPT_FATAL_EXIT 1
#endif // CFGOPT_FATAL_EXIT

static inline void cfgopt_fatal(char const *message)
{
	fprintf(stderr, "cfgopt: %s\n", message);
	exit(CFGOPT_FATAL_EXIT);
}

void cfgopt_{{name}}_init(struct cfgopt_{{name}} *cfg)
#ifndef CFGOPT_IMPL_{{name}}
;
#else
{
	{%- for flag in flags %}
	cfg->cfg_{{flag.name}} = {{flag.type.c_default()}};
	{%- endfor %}
}
#endif // CFGOPT_IMPL_{{name}}

#ifdef CFGOPT_IMPL_{{name}}
void cfgopt_parse_string(char const *arg, char const **out) {}
void cfgopt_parse_int64(char const *arg, int64_t *out) {}
void cfgopt_parse_float64(char const *arg, double *out) {}
void cfgopt_parse_bool(char const *arg, bool *out) {}
#endif // CFGOPT_IMPL_{{name}}

void cfgopt_{{name}}_parse(struct cfgopt_{{name}} *cfg, int argc, char **argv)
#ifndef CFGOPT_IMPL_{{name}}
;
#else
{
	int argi;
	int len;

	for (argi = 0; argi < argc; ++argc) {
		{%- for flag in flags %}

		len = strlen("{{flag.name}}");
		if (strncmp("-{{flag.name}}", argv[argi], len + 2)) {
			if (argv[argi][len] == 0) {
				// TODO: report error if no more argument
				argi += 1;
				cfgopt_parse_{{flag.type.name()}}(
					argv[argi],
					&cfg->cfg_{{flag.name}}
				);
				continue;
			} else if (argv[argi][len] == '=') {
				cfgopt_parse_{{flag.type.name()}}(
					argv[argi] + len + 1,
					&cfg->cfg_{{flag.name}}
				);
				continue;
			}
		}
		{%- endfor %}

		// TODO: Report error for undefined flag.
		cfgopt_fatal("Undefined flag");
	}
}
#endif // CFGOPT_IMPL_{{name}}

#endif // CFGOPT_{{name}}_H_
